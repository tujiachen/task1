
#include"stm32f10x.h"
 
#define ON           1
#define OFF          0
 
#define DELAY_TIME   0x3FFFFF
 
enum 
{
  LED1 = 0,
	LED2,
	LED3,
	MAX_LED,
};
 
typedef struct led_gpio_s
{
	int                 num;   /* LED��� */
	GPIO_TypeDef        *group; /* LEDʹ�õ�GPIO����һ��: GPIOB or GPIOD */	
  uint16_t            pin;    /* LEDʹ�õ�GPIO���е���һ��pin: GPIO_Pin_x */
} led_gpio_t;
 
 
led_gpio_t        leds_gpio[MAX_LED] =
{
		{LED1, GPIOB, GPIO_Pin_5}, /* LED1 �õ�GPB5 */
		{LED2, GPIOD, GPIO_Pin_6}, /* LED2 �õ�GPD6 */
		{LED3, GPIOD, GPIO_Pin_3}, /* LED3 �õ�GPD3 */		
};
 
 
void init_led_gpio(void)
{
	int                i;
	GPIO_InitTypeDef   GPIO_InitStructure;
 
	/* ʹ��PB��PD�� GPIO��ʱ�� */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB | RCC_APB2Periph_GPIOD , ENABLE);	
	
	/*���� PB5(LED1), PD6(LED2), PD3(LED3)ΪGPIO �Ƴ�����ģʽ,���߷�ת�ٶ�Ϊ50MHz */
	for(i=0; i<MAX_LED; i++)
	{
		/*���� PB5(LED1)ΪGPIO �Ƴ�����ģʽ,���߷�ת�ٶ�Ϊ50MHz */
		GPIO_InitStructure.GPIO_Pin = leds_gpio[i].pin;				     
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_Init(leds_gpio[i].group, &GPIO_InitStructure);						
  }
}
 
void turn_led(int which, int cmd)
{
   if(which<0 || which> MAX_LED )
		 return;
	 
	 if(OFF == cmd)
		 GPIO_ResetBits(leds_gpio[which].group, leds_gpio[which].pin);
	 else
		 GPIO_SetBits(leds_gpio[which].group, leds_gpio[which].pin);
}
 
void Delay(__IO uint32_t nCount)
{
   for(; nCount != 0; nCount--) ;
}
 
int main(void)
{
	/* ��ʼ��ϵͳʱ�� */
  SystemInit();
	
	/* ��ʼ������LED��GPIO�ܽ�*/
	init_led_gpio();
 
  while(1)
  {
		  /* ��LED1��LED2��LED3���� */
			turn_led(LED1, ON);
		  turn_led(LED2, ON);
			turn_led(LED3, ON);
		  Delay(DELAY_TIME);
 
		  /* ��LED1��LED2��LED3����*/		
			turn_led(LED2, OFF);
		  turn_led(LED1, OFF);
			turn_led(LED3, OFF);
		  Delay(DELAY_TIME);
  }

